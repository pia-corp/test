name: CI

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  CheckChangesPub:
    runs-on: ubuntu-latest
    outputs:
      public_changed: ${{ env.public_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.6

      - name: Detect changes in the public folder
        id: detect_changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^public/'; then
            echo "public_changed=true" >> $GITHUB_ENV
          else
            echo "public_changed=false" >> $GITHUB_ENV
          fi

  Debug:
    needs: CheckChangesPub
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: debug
        run: |
          echo "public_changed: ${{ needs.CheckChangesPub.outputs.public_changed }}"


  MarkupLinter:
    name: Markup Linter
    needs: CheckChangesPub
    if: github.event.sender.type != 'Bot' && contains(github.head_ref, 'develop') && needs.CheckChangesPub.outputs.public_changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.1.6
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"
          cache: npm

      - name: Restore npm dependencies
        id: cache-npm
        uses: actions/cache@v4.0.2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-v${{ vars.GIT_ACTIONS_NODE_VER }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm dependencies (if cache miss)
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        run: npm ci --no-audit --progress=false --silent

      - name: Lint and rewrite markup
        run: npm run linter

  MarkupLinterNoNeed:
    needs: CheckChangesPub
    name: Markup Linter(no need)
    if: github.event.sender.type == 'Bot' || contains(github.head_ref, 'release') || needs.CheckChangesPub.outputs.public_changed == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      contents: read

    steps:
      - name: Skip Action
        run: echo "linter skip"

  CheckImageSize:
    name: Check Image Size
    needs: CheckChangesPub
    if: github.event.sender.type != 'Bot' && contains(github.head_ref, 'develop') && needs.CheckChangesPub.outputs.public_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.6

      - name: Find large images
        id: file_size_larger_check
        run: |
          max_size=500000  # 500KB in bytes
          exists_error=0
          error_list=""

          for img in $(find ./public -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.webp" \)); do
            if [ -f "$img" ]; then
              size=$(stat -c%s "$img" 2>/dev/null)
              if [ $? -eq 0 ] && [ $size -gt $max_size ]; then
                echo "Error: $img is too large (${size} bytes)"
                exists_error=1
                error_list="${error_list}\n$img (${size} bytes)"
              fi
            fi
          done

          if [ "$exists_error" = 1 ]; then
            echo -e "The following images are too large:${error_list}"
            echo -e "status:${exists_error}"
            echo "exists_error=$exists_error" >> $GITHUB_ENV
            echo "error_message=画像のファイルサイズが大きすぎます:${error_list}" >> $GITHUB_ENV
          fi

      - name: Comment on PR with warnings
        if: ${{ env.exists_error == 1 }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const error_message = `${{ env.error_message }}`;
            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: error_message
            };
            await github.rest.issues.createComment(param);

      - name: Fail workflow if there are errors
        if: ${{ env.exists_error == 1 }}
        run: exit 1

  CheckImageSizeNoNeed:
    name: Check Image Size(no need)
    needs: CheckChangesPub
    if: github.event.sender.type == 'Bot' || contains(github.head_ref, 'release') || needs.CheckChangesPub.outputs.public_changed == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      contents: read

    steps:
      - name: Skip Action
        run: echo "check image skip"

  Lighthouse:
    name: Lighthouse-CI
    needs: CheckChangesPub
    if: github.event.sender.type != 'Bot' && contains(github.head_ref, 'develop') && needs.CheckChangesPub.outputs.public_changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.6
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.github/config/.lighthouserc.json'
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Comment on PR with Lighthouse results
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          budgetPath: ./.github/config/budget.json
          script: |
            const urls = ${{steps.lighthouse_audit.outputs.links}};
            const assertion = ${{steps.lighthouse_audit.outputs.assertionResults}};
            const obj = ${{ steps.lighthouse_audit.outputs.manifest }};
            const formatResult = (res) => Math.round((res * 100));
            const file_name = (url) => { return url.replace(/^http:\/\/localhost:\d+\//, ""); };
            const score = res => res >= 90 ? '🟢' : res >= 50 ? '🟠' : '🔴';
            const getValueByKey = (key) => { return urls[key] || null };
            let exists_error = 0;

            let view_text2 = "";
            const assertion_body = (value) => {
              if (value.passed == false) {
                const passed = value.passed;
                const auditProperty = value.auditProperty;
                view_text2 += `❌${file_name(value.url)}の${auditProperty}が閾値に達していません。レポートを確認して修正してください。
                `;
              }
              if (!exists_error) {
                if (value.passed == false) {
                  exists_error = 1;
                }
              }
            ;}
            Object.keys(assertion).forEach(key => assertion[key] = assertion_body(assertion[key]));

            let view_text = "";
            const table_body = (urlArray) => {
              if (urlArray.isRepresentativeRun == true) {
                const accessibility = formatResult(urlArray.summary["accessibility"]);
                const practices = formatResult(urlArray.summary["best-practices"]);
                const performance = formatResult(urlArray.summary["performance"]);
                const seo = formatResult(urlArray.summary["seo"]);
                view_text += `| [${file_name(urlArray.url)}](${getValueByKey(urlArray.url)}) | ${score(performance)} ${performance} | ${score(accessibility)} ${accessibility} | ${score(practices)} ${practices} | ${score(seo)} ${seo} |\n`;
              }
            };
            Object.keys(obj).forEach(key => obj[key] = table_body(obj[key]));

            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚡️ [Lighthouse Mobile Report]:

            | File name | Performance | Accessibility | Best practices | SEO |
            | --- | --- | --- | --- | --- |
            ${view_text}

            ※表示されている結果は3回の結果から得られた中央値です。
            ※パフォーマンス結果はブレがありますリンク先の診断結果を見て判断してください。`};

            core.setOutput("exists_error", exists_error);
            core.setOutput("error_message", view_text2);
            await github.rest.issues.createComment(param);

      - name: Comment on PR with warnings
        if: ${{ steps.format_lighthouse_score.outputs.exists_error == '1' }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const error_message = `${{ steps.format_lighthouse_score.outputs.error_message }}`;
            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: error_message
            };
            await github.rest.issues.createComment(param);

      - name: Fail workflow if there are errors
        if: ${{ steps.format_lighthouse_score.outputs.exists_error == '1' }}
        run: exit 1

  LighthouseNoNeed:
    name: Lighthouse-CI(no need)
    needs: CheckChangesPub
    if: github.event.sender.type == 'Bot' || contains(github.head_ref, 'release') || needs.CheckChangesPub.outputs.public_changed == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      contents: read

    steps:
      - name: Skip Action
        run: echo "Lighthouse skip"
