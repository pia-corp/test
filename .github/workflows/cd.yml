name: CD

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  SETUP:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && startsWith(github.head_ref, 'develop')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"
          cache: npm

      - name: Cache npm dependencies
        id: cache_dependency
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        if: ${{ steps.cache_dependency.outputs.cache-hit != 'true' }}
        run: npm ci --no-audit --progress=false --silent


  build:
    needs: SETUP
    outputs:
      changed_files: ${{ steps.commit_status.outputs.changed_files }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_BRANCH_NAME: ${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.4

      - name: Checkout code
        uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Set Git configuration
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create new branch
        run: |
          git checkout -b release/github_${{ env.RELEASE_BRANCH_NAME }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"
          cache: npm

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      - name: Lint and rewrite markup
        run: npm run formatting

      - name: Build Next.js App
        run: npx next build
        env:
          MICROCMS_SERVICE_DOMAIN: ${{ vars.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}

      - name: Commit existing changes
        id: commit_status
        run: |
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Commit existing changes for PR"
            echo "changed_files=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "changed_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Push new branch
        if: steps.commit_status.outputs.changed_files == 'true'
        run: |
          git push -u origin release/github_${{ env.RELEASE_BRANCH_NAME }}

      - name: Create PR
        if: steps.commit_status.outputs.changed_files == 'true'
        run: |
          gh pr create --fill
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Auto-merge PR
        if: steps.commit_status.outputs.changed_files == 'true'
        run: gh pr merge --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: skip
        if: steps.commit_status.outputs.changed_files == 'false'
        run: echo "No Changes in files related to"

  create_tag:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: needs.build.outputs.changed_files == 'true'

    steps:
      - name: Get previous tag
        id: pre_tag
        run: |
          echo "pre_tag=$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_ENV

      - name: Generate release tag
        id: release_tag
        run: |
          today=$(date +'%Y.%m.%d')
          pre_release_date=$(echo "${{ env.pre_tag }}" | awk -F'-' '{print $1}')
          pre_release_count=$(echo "${{ env.pre_tag }}" | awk -F'-' '{print $2}')
          if [[ ! $pre_release_date = $today ]]; then
            echo "init count"
            pre_release_count=0
          fi
          echo "release_tag=$today-$(($pre_release_count + 1))" >> $GITHUB_ENV

      - name: Generate release note
        id: release_note
        run: |
          release_note=$(curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d "{\"tag_name\":\"${{ env.release_tag }}\", \"previous_tag_name\":\"${{ env.pre_tag }}\"}" | jq .body | sed 's/"//g')
          echo "release_note=$release_note" >> $GITHUB_ENV

      - name: Create Release
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \"tag_name\": \"${{ env.release_tag }}\", \"name\": \"${{ env.release_tag }}\", \"body\": \"${{ env.release_note }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/releases
