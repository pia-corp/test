name: Preview URL Lighthouse Audit

on:
  workflow_call:

jobs:
  Lighthouse:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      issues: write
      pull-requests: write
    # strategy:
    #   matrix:
    #     platform: [".lighthouserc_pc.json",".lighthouserc.json"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.github/config/.lighthouserc.json'
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Comment on PR
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const urls = ${{steps.lighthouse_audit.outputs.links}};
            const obj = ${{ steps.lighthouse_audit.outputs.manifest }};
            const formatResult = (res) => Math.round((res * 100));
            const file_name = (url) => { return url.replace(/^http:\/\/localhost:\d+\//, ""); };
            const score = res => res >= 90 ? '🟢' : res >= 50 ? '🟠' : '🔴';
            const getValueByKey = (key) => { return urls[key] || null };
            let exists_error = false;

            let view_text = "";
            const table_body = (urlArray) => {
              if (urlArray.isRepresentativeRun == true) {
                const accessibility = formatResult(urlArray.summary["accessibility"]);
                const practices = formatResult(urlArray.summary["best-practices"]);
                const performance = formatResult(urlArray.summary["performance"]);
                const seo = formatResult(urlArray.summary["seo"]);
                view_text += `| [${file_name(urlArray.url)}](${getValueByKey(urlArray.url)}) | ${score(performance)} ${performance} | ${score(accessibility)} ${accessibility} | ${score(practices)} ${practices} | ${score(seo)} ${seo} |\n`;
              }
            };
            Object.keys(obj).forEach(key => obj[key] = table_body(obj[key]));

            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚡️ [Lighthouse Mobile Report]:

            | File name | Performance | Accessibility | Best practices | SEO |
            | --- | --- | --- | --- | --- |
            ${view_text}
            ※表示されている結果は3回の結果から得られた中央値です。
            ※パフォーマンス結果はブレがありますリンク先の診断結果を見て判断してください。`};

            await github.rest.issues.createComment(param);

      - name: assertionResults
        run: |
          echo ${{ fromJson(steps.lighthouse_audit.outputs.assertionResults).length }}
          echo ${{ fromJson(steps.lighthouse_audit.outputs.assertionResults).length > 0 }}


      - name: Comment on Warning
        if: ${{ fromJson(steps.lighthouse_audit.outputs.assertionResults).length > 0 }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const assertionResults = ${{ steps.lighthouse_audit.outputs.assertionResults }};
            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `結果が低いので修正が必要です`};
            await github.rest.issues.createComment(param);
          run: exit 1


          # const assertionResults = [
          #   {
          #       "name":"minScore",
          #       "expected":0.6,
          #       "actual":0.59,
          #       "values":[0.57,0.59,0.59],
          #     "operator":">=",
          #     "passed":false,
          #     "auditProperty":"performance",
          #     "auditId":"categories",
          #     "level":"error",
          #     "url":"http://localhost:34189/company.html"
          #   },
          #   {
          #     "name":"minScore",
          #     "expected":0.6,
          #     "actual":0.56,
          #     "values":[0.56,0.56,0.56],
          #     "operator":">=",
          #     "passed":false,
          #     "auditProperty":"best-practices",
          #     "auditId":"categories",
          #     "level":"error",
          #     "url":"http://localhost:34189/company.html"
          #   }
          # ];
