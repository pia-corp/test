name: Preview URL Lighthouse Audit

on:
  workflow_call:

jobs:
  Lighthouse:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.github/config/.lighthouserc.json'
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Comment on PR
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const urls = ${{steps.lighthouse_audit.outputs.links}};
            const assertion = ${{steps.lighthouse_audit.outputs.assertionResults}};
            const obj = ${{ steps.lighthouse_audit.outputs.manifest }};
            const formatResult = (res) => Math.round((res * 100));
            const file_name = (url) => { return url.replace(/^http:\/\/localhost:\d+\//, ""); };
            const score = res => res >= 90 ? '🟢' : res >= 50 ? '🟠' : '🔴';
            const getValueByKey = (key) => { return urls[key] || null };
            let exists_error = 0;

            let view_text2 = "";
            const assertion_body = (value) => {
              if (value.passed == false) {
                const passed = value.passed;
                const auditProperty = value.auditProperty;
                view_text2 += `❌${file_name(value.url)}の${auditProperty}が閾値に達していません。レポートを確認して修正してください。
                `;
              }
              if (!exists_error) {
                if (value.passed == false) {
                  exists_error = 1;
                }
              }
            ;}
            Object.keys(assertion).forEach(key => assertion[key] = assertion_body(assertion[key]));

            let view_text = "";
            const table_body = (urlArray) => {
              if (urlArray.isRepresentativeRun == true) {
                const accessibility = formatResult(urlArray.summary["accessibility"]);
                const practices = formatResult(urlArray.summary["best-practices"]);
                const performance = formatResult(urlArray.summary["performance"]);
                const seo = formatResult(urlArray.summary["seo"]);
                view_text += `| [${file_name(urlArray.url)}](${getValueByKey(urlArray.url)}) | ${score(performance)} ${performance} | ${score(accessibility)} ${accessibility} | ${score(practices)} ${practices} | ${score(seo)} ${seo} |\n`;
              }
            };
            Object.keys(obj).forEach(key => obj[key] = table_body(obj[key]));

            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚡️ [Lighthouse Mobile Report]:

            | File name | Performance | Accessibility | Best practices | SEO |
            | --- | --- | --- | --- | --- |
            ${view_text}

            ※表示されている結果は3回の結果から得られた中央値です。
            ※パフォーマンス結果はブレがありますリンク先の診断結果を見て判断してください。`};

            core.setOutput("exists_error", exists_error);
            core.setOutput("error_message", view_text2);
            await github.rest.issues.createComment(param);

      - name: Comment on Warning
        if: ${{ steps.format_lighthouse_score.outputs.exists_error == '1' }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const error_message = `${{ steps.format_lighthouse_score.outputs.error_message }}`;
            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: error_message
            };
            await github.rest.issues.createComment(param);

      - name: Checks Stop
        if: ${{ steps.format_lighthouse_score.outputs.exists_error == '1' }}
        run: exit 1
