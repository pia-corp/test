name: TEST

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_BRANCH_NAME: ${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.4

      - name: 今のブランチ
        run: |
          git branch --contains

      - name: Checkout code
        uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}

      - name: 今のブランチ2
        run: |
          git branch --contains

      - name: Set Git configuration
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create new branch
        run: |
          git checkout -b release/github_${{ env.RELEASE_BRANCH_NAME }}

      - name: 今のブランチ3
        run: |
          git branch --contains

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"
          cache: npm

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      # - name: Create release branch
      #   run: git checkout -b release/github_${{ github.run_id }}

      - name: Build Next.js App
        run: npm run build
        env:
          MICROCMS_SERVICE_DOMAIN: ${{ vars.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}

      - name: Commit existing changes
        run: |
          git add .
          git commit -m "Commit existing changes for PR"

      - name: Push new branch
        run: |
          git push -u origin release/github_${{ env.RELEASE_BRANCH_NAME }}

      - name: Create PR
        run: |
          gh pr create --fill
          echo "PR URL: $pr_url"
          pr_number=$(echo $pr_url | grep -oE '[0-9]+$')
          echo "::set-output name=pr_number::$pr_number"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Use PR Number
        run: echo "The created PR number is ${{ steps.create_pr.outputs.pr_number }}"

      - name: Auto Merge Pull Request
        uses: pascalgn/automerge-action@v3.0.0
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          merge-method: squash
          pull-request-number: ${{ steps.create_pr.outputs.pr_number }}





      # - name: Auto commit
      #   uses: stefanzweifel/git-auto-commit-action@v5
      #   id: aca
      #   with:
      #     commit_message: Apply formatting
      #     branch: release/github_${{ github.run_id }}
      #     commit_user_name: github-actions
      #     commit_user_email: github-actions@github.com
      #     create_branch: true

      # - name: Add commit
      #   run: |
      #     echo "changes_detected: ${{ steps.aca.outputs.changes_detected }}"
      #     echo "commit_hash: ${{ steps.aca.outputs.commit_hash }}"

      # - name: Create pull request
      #   id: cpr
      #   uses: peter-evans/create-pull-request@v6.0.5
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: release/github_${{ github.run_id }}
      #     title: "Build: ${{ github.run_id }}"
      #     base: main
      #     author: github-actions <github-actions@github.com>
      #     committer: github-actions <github-actions@github.com>
      #     body: "Automatically generated SSG build for ${{ github.run_id }}"
      #     reviewers: "github-actions"
      #     commit-message: '[create-pull-request] automated change'
      #     signoff: false
      #     delete-branch: false
      #     draft: false

      # - name: Check outputs url
      #   run: |
      #     echo "pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}"
      #     echo "pull-request-url: ${{ steps.cpr.outputs.pull-request-url }}"


















      # - name: Add built files to git
      #   run: |
      #     git config user.email github-actions@github.com
      #     git config user.name github-actions
      #     git add .

      # - name: Add commit
      #   run: |
      #     git commit -m "build: ${{ github.run_id }}"

      # - name: Push changes to release branch
      #   run: git push --set-upstream origin release/github_${{ github.run_id }}

      # run: git push origin release/github_${{ github.run_id }}

      # - name: Create pull request
      #   id: cpr
      #   uses: peter-evans/create-pull-request@v6.0.5
      #   with:
      #     token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      #     branch: release/github_${{ github.run_id }}
      #     title: "Build: ${{ github.run_id }}"
      #     base: main
      #     author: GitHub Action <action@github.com>
      #     committer: GitHub Action <action@github.com>
      #     body: "Automatically generated SSG build for ${{ github.run_id }}"
      #     reviewers: "github-actions"

      # - name: Check outputs
      #   run: |
      #     echo "${{ steps.cpr.outputs.pull-request-number }}"

      # - name: Enable auto-merge
      #   uses: peter-evans/enable-pull-request-automerge@v3
      #   with:
      #     pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     repository: main


      # - name: Merge pull request (if squash is desired)
      #   uses: actions/github-script@v7.0.1
      #   with:
      #     script: |
      #       await github.pulls.merge({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.payload.pull_request.number,
      #         merge_method: 'squash'
      #       })



      # - uses: actions/checkout@v4.1.4
      #   with:
      #     ref: ${{ github.head_ref }}

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4.0.2
      #   with:
      #     node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"
      #     cache: npm

      # - name: Restore node_modules
      #   uses: actions/cache@v4.0.2
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      #     restore-keys: ${{ runner.os }}-node-

      # - name: Dependency Installation (If there is no cache)
      #   if: steps.restore_node_modules.outputs.cache-hit != 'true'
      #   run: npm ci --no-audit --progress=false --silent

      # - name: Lint and rewrite markup
      #   run: npm run formatting

      # # - name: Create new branch
      # #   run: |
      # #     git checkout -b release/${RELEASE_BRANCH_NAME}
      # #     git push origin release/${RELEASE_BRANCH_NAME}




      # - name: Generate github token
      #   id: generate_token
      #   uses: tibdex/github-app-token@v1
      #   with:
      #     app_id: ${{ secrets.BOT_APP_ID }}
      #     private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      # - name: Checkout
      #   uses: actions/checkout@v3
      #   with:
      #     fetch-depth: '0'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Set e-mail and username
      #   run: |
      #     git config user.email github-actions@github.com
      #     git config user.name github-actions

      # - name: Merge master to oldest release
      #   run: |
      #     git fetch
      #     list=($(git branch -a | grep remotes/origin/release/ | sed s@remotes/origin/release/@\@ | sort ))
      #     git checkout release/${list[0]}
      #     git merge master
      #     git push origin release/${list[0]}
      #     git checkout develop
      #     git merge master
      #     git push origin develop
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      # - name: Stage Commit changes
      #   run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      #     git add .
      #     git commit -m "Committing changes"

      # - name: Push changes to remote repository
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Checkout repository
      #   uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0 # この設定がないと差分検出がうまくいかないので注意
      #     ref: release

      # - name: Diff
      #   id: diff
      #   # diffがあるとfailureになる
      #   run: |
      #     git diff origin/main origin/release --exit-code
      #   # failure時に次のジョブを実行できるようにする
      #   continue-on-error: true

      # - name: 【定期実行】Create Pull Request
      #   id: create-pull-request
      #   # diffがある時のみPRを作成する
      #   run: |
      #     PULL_REQUEST_URI=$(gh pr create -B main -t "【定期実行】本番リリース " -b "")
      #     echo "PULL_REQUEST_URI=$PULL_REQUEST_URI" >> "$GITHUB_OUTPUT"

      # - name: 【定期実行】Merge Pull Request
      #   id: merge_pr
      #   # diffがある時のみPRをマージする
      #   run: |
      #     gh pr merge ${{steps.create-pull-request.outputs.PULL_REQUEST_URI}} --merge
      #     echo "IS_DISPATCH=TRUE" >> "$GITHUB_OUTPUT"



        # git checkout -b release/${RELEASE_BRANCH_NAME}
        # git commit -m \"Automatically format code with Prettier\"
        # git push origin HEAD
        # gh pr create \
        #   -B main\
        #   -t '【コード整形】' \
        #   -a ${{ github.actor }}  \
        #   -b 'auto rewrite'
        # echo "pr_url=$(gh pr view --json number,url | jq -r '.[] | .url' | head -n 1)" >> $GITHUB_ENV

        # git checkout [branch]


      # - name: Auto-commit changes (optional)
      #   id: check_pr
      #   uses: stefanzweifel/git-auto-commit-action@v5.0.1
      #   with:
      #     commit_message: Automatically format code with Prettier
      #     create_branch: true
      #     branch: feature/${{ env.RELEASE_BRANCH_NAME }}

      # - name: Check PullRequest Exists
      #   id: check_pr
      #   run: |
      #     echo "message=$(gh pr list -S 'コード整形'in:title --json | jq -r '.[] | .title')" >> "$GITHUB_ENV"

      # - name: Create Release Pull Request
      #   run: |
      #     gh pr create \
      #       -B main\
      #       -t '【コード整形】' \
      #       -a ${{ github.actor }}  \
      #       -b 'auto rewrite'
      #     echo "PR=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV

      # - name: Approve PR
      #   run: gh pr review "${{ env.pr_url }}" --approve
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # - name: Enable auto-merge for Steward PRs
      #   if: steps.check_pr.outputs.message == 'null'
      #   run: gh pr merge --merge --auto "${{ env.pr_url }}"





      # - name: Auto-commit changes (optional)
      #   uses: stefanzweifel/git-auto-commit-action@v5.0.1
      #   with:
      #     commit_message: Automatically format code with Prettier
      #     create_branch: true
      #     branch: feature/${{ env.RELEASE_BRANCH_NAME }}

      # - name: Check PullRequest Exists
      #   id: check_pr
      #   env:
      #     HEAD_MESSAGE: ${{ github.event.head_commit.message }}
      #   run: |
      #     COMMIT_MESSAGE=$(echo "${HEAD_MESSAGE}" | sed -n -e 1p)
      #     echo "message=${COMMIT_MESSAGE}" >> "$GITHUB_OUTPUT"
      #     echo "count=$(gh pr list -S 'コード整形'in:title | wc -l)" >> "$GITHUB_OUTPUT"

      # - name: Create Release Pull Request
      #   if: ${{ steps.check_pr.outputs.count == 0 }}
      #   run: |
      #     gh pr create \
      #       -B feature/${{ env.RELEASE_BRANCH_NAME }} \
      #       -t '【コード整形】${{ steps.check_pr.outputs.message }}' \
      #       -a ${{ github.actor }}  \
      #       -b 'auto rewrite' \

      # - name: Approve PR
      #   run: gh pr review "$PR_URL" --approve
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # - name: Enable auto-merge for Steward PRs
      #   run: gh pr merge --merge --auto "$PR_URL"
