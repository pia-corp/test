name: TEST

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_BRANCH_NAME: ${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"
          cache: npm

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      - name: Lint and rewrite markup
        run: npm run lint:prettier

      # releasブランチ名を作成
      - name: Create and push release branch
        id: release_branch
        run: |
          git checkout -b feature/${RELEASE_BRANCH_NAME}
          git commit -m \"Automatically format code with Prettier\"
          git push origin HEAD
          gh pr create \
            -B main\
            -t '【コード整形】' \
            -a ${{ github.actor }}  \
            -b 'auto rewrite'
          echo "pr_url=$(gh pr view --json number,url | jq -r '.[] | .url' | head -n 1)" >> $GITHUB_ENV

        # git checkout [branch]


      # - name: Auto-commit changes (optional)
      #   id: check_pr
      #   uses: stefanzweifel/git-auto-commit-action@v5.0.1
      #   with:
      #     commit_message: Automatically format code with Prettier
      #     create_branch: true
      #     branch: feature/${{ env.RELEASE_BRANCH_NAME }}

      # - name: Check PullRequest Exists
      #   id: check_pr
      #   run: |
      #     echo "message=$(gh pr list -S 'コード整形'in:title --json | jq -r '.[] | .title')" >> "$GITHUB_ENV"

      # - name: Create Release Pull Request
      #   run: |
      #     gh pr create \
      #       -B main\
      #       -t '【コード整形】' \
      #       -a ${{ github.actor }}  \
      #       -b 'auto rewrite'
      #     echo "PR=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV

      - name: Approve PR
        run: gh pr review "${{ env.pr_url }}" --approve
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Enable auto-merge for Steward PRs
        if: steps.check_pr.outputs.message == 'null'
        run: gh pr merge --merge --auto "${{ env.pr_url }}"





      # - name: Auto-commit changes (optional)
      #   uses: stefanzweifel/git-auto-commit-action@v5.0.1
      #   with:
      #     commit_message: Automatically format code with Prettier
      #     create_branch: true
      #     branch: feature/${{ env.RELEASE_BRANCH_NAME }}

      # - name: Check PullRequest Exists
      #   id: check_pr
      #   env:
      #     HEAD_MESSAGE: ${{ github.event.head_commit.message }}
      #   run: |
      #     COMMIT_MESSAGE=$(echo "${HEAD_MESSAGE}" | sed -n -e 1p)
      #     echo "message=${COMMIT_MESSAGE}" >> "$GITHUB_OUTPUT"
      #     echo "count=$(gh pr list -S 'コード整形'in:title | wc -l)" >> "$GITHUB_OUTPUT"

      # - name: Create Release Pull Request
      #   if: ${{ steps.check_pr.outputs.count == 0 }}
      #   run: |
      #     gh pr create \
      #       -B feature/${{ env.RELEASE_BRANCH_NAME }} \
      #       -t '【コード整形】${{ steps.check_pr.outputs.message }}' \
      #       -a ${{ github.actor }}  \
      #       -b 'auto rewrite' \

      # - name: Approve PR
      #   run: gh pr review "$PR_URL" --approve
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # - name: Enable auto-merge for Steward PRs
      #   run: gh pr merge --merge --auto "$PR_URL"
