name: Preview URL Lighthouse Audit

on:
  workflow_dispatch:
  push:
  issue_comment:
    types: [edited]

jobs:
  lhci:
    name: Lighthouse
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

      - name: npm install, build
        run: |
          npm install
          npm run build

      - name: run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const links = ${{ steps.lighthouse_audit.outputs.links }}

            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))

            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'

            const comment = [
                `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                `| ${score(result.pwa)} PWA | ${result.pwa} |`,
                ' ',
                `*Lighthouse ran on [${Object.keys(links)[0]}](${Object.keys(links)[0]})*`
            ].join('\n')

            core.setOutput("comment", comment);

          #  ${{ steps.format_lighthouse_score.outputs.comment }}
      - name: Post Lighthouse Audit Comment
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = core.getInput('comment');
            const github = require('@actions/github');
            const context = github.context;

            const octokit = new github.getOctokit(process.env.GITHUB_TOKEN);

            const { owner, repo, number } = context.issue;

            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: comment
            });
