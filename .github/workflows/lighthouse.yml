name: Preview URL Lighthouse Audit

on:
  workflow_call:

jobs:
  # call_workflow:
  #   uses: ./.github/workflows/_npm.yml
  #   with:
  #     node_version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

  lhci:
    # needs:
    #   - call_workflow

    runs-on: ubuntu-latest
    timeout-minutes: 30

    name: Lighthouse
    steps:
      - uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      # - name: Print file URLs
      #   run: |
      #     echo "File URLs:"
      #     git show $GITHUB_SHA --name-only

      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          # urls: |
          #   git show $GITHUB_SHA --name-only
          configPath: './.lighthouserc.json'
          temporaryPublicStorage: true

      - name: Comment on PR
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary;
            const obj = ${{ steps.lighthouse_audit.outputs.manifest }};
            const formatResult = (res) => Math.round((res * 100));
            const file_name = (url) => { return url.replace(/^http:\/\/localhost:\d+\//, ""); };
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥';
            let view_text = "";

            const table_body = (urlArray) => {
              const accessibility = formatResult(urlArray.summary["accessibility"]);
              const practices = formatResult(urlArray.summary["best-practices"]);
              const performance = formatResult(urlArray.summary["performance"]);
              const seo = formatResult(urlArray.summary["seo"]);
              view_text += `${file_name(urlArray.url)} | ${score(performance)} ${performance} | ${score(accessibility)} ${accessibility} | ${score(practices)} ${practices} | ${score(seo)} ${seo} |
            `;
            };
            Object.keys(obj).forEach(key => obj[key] = table_body(obj[key]));

            let param = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ö°Ô∏è [Lighthouse monile report]:

            | File name | Performance | Accessibility | Best practices | SEO |
            | --- | --- | --- | --- | --- |
            ${view_text}
            `};

            await github.rest.issues.createComment(param);
