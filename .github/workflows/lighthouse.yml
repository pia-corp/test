name: Preview URL Lighthouse Audit

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize, reopened ]
  issue_comment:
    types: [edited]

jobs:
  call_workflow:
    if: github.event.action == 'synchronize'
    uses: ./.github/workflows/_npm.yml
    with:
      node_version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

  lhci:
    needs:
      - call_workflow

    runs-on: ubuntu-latest
    timeout-minutes: 30

    name: Lighthouse
    steps:
      - uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}

      # - name: Audit preview URL with Lighthouse
      #   id: lighthouse_audit
      #   uses: treosh/lighthouse-ci-action@v11
      #   with:
      #     configPath: './.lighthouserc.json'
      #     uploadArtifacts: true
      #     temporaryPublicStorage: true

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "${{ vars.GIT_ACTIONS_NODE_VER }}"

      - name: Restore node_modules
        uses: actions/cache@v4.0.2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Dependency Installation (If there is no cache)
        if: steps.restore_node_modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit --progress=false --silent

      # - name: run Lighthouse CI
      #   run: |
      #     npm install -g @lhci/cli@0.13.x
      #     lhci autorun --preset=lighthouse:recommended
      #   env:
      #     LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}


      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.lighthouserc.json'
          temporaryPublicStorage: true

      - name: Comment on PR
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary;
            const obj = ${{ steps.lighthouse_audit.outputs.manifest }};
            const formatResult = (res) => Math.round((res * 100));
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥';

            let view_text = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ö°Ô∏è [Lighthouse report]:

            | file | Performance | Accessibility | Best practices | SEO | PWA |
            | --- | --- | --- | --- | --- | --- |
            `};

            const table_body = (urlArray) => {
              const accessibility = formatResult(urlArray.summary["accessibility"]);
              const practices = formatResult(urlArray.summary["best-practices"]);
              const performance = formatResult(urlArray.summary["performance"]);
              const pwa = formatResult(urlArray.summary["pwa"]);
              const seo = formatResult(urlArray.summary["seo"]);
              view_text += `${urlArray.url} | ${score(performance)} ${urlArray.summary["performance"]} | ${score(accessibility)} ${urlArray.summary["accessibility"]} | ${score(practices)} ${urlArray.summary["best-practices"]} | ${score(seo)} ${urlArray.summary["seo"]} | ${score(pwa)} ${urlArray.summary["pwa"]} |
            `;
            };
            Object.keys(obj).forEach(key => obj[key] = table_body(obj[key]));

            await github.rest.issues.createComment(view_text);


      # - name: Format lighthouse score
      #   id: format_lighthouse_score
      #   uses: actions/github-script@v7.0.1
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
      #       const links = ${{ steps.lighthouse_audit.outputs.links }}

      #       const formatResult = (res) => Math.round((res * 100))
      #       Object.keys(result).forEach(key => result[key] = formatResult(result[key]))

      #       const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'

      #       const comment = [
      #           `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
      #           '| Category | Score |',
      #           '| --- | --- |',
      #           `| ${score(result.performance)} Performance | ${result.performance} |`,
      #           `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
      #           `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
      #           `| ${score(result.seo)} SEO | ${result.seo} |`,
      #           `| ${score(result.pwa)} PWA | ${result.pwa} |`,
      #           ' ',
      #           `*Lighthouse ran on [${Object.keys(links)[0]}](${Object.keys(links)[0]})*`
      #       ].join('\n')

      #       core.setOutput("comment", comment);

      # - name: Output Lighthouse comment
      #   run: echo "${{ steps.format_lighthouse_score.outputs.comment }}"


      # - name: Comment PR
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå${{ steps.format_lighthouse_score.outputs.comment }}`
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `## Terraform checks in directory out\n` + output
      #       })

      #     #  ${{ steps.format_lighthouse_score.outputs.comment }}
      # - name: Post Lighthouse Audit Comment
      #   uses: actions/github-script@v7.0.1
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const comment = core.getInput('comment');
      #       const github = require('@actions/github');
      #       const context = github.context;

      #       const octokit = new github.getOctokit(process.env.GITHUB_TOKEN);

      #       const { owner, repo, number } = context.issue;

      #       await octokit.issues.createComment({
      #         owner,
      #         repo,
      #         issue_number: number,
      #         body: comment
      #       });
